
- edit and delete
  /- edit & delete projects
  - edit & delete tasks
- beitreten
  /- projectMembers table
  /- becomeMember action
  - add members to projects everywhere
  - becomeMember reducer

- tab admin
  - edit
  - delete
  - move state
  - accept tasks
  - approve assignee



- add kanban board
  - one board per project
  - owner, state
- issues draft
- graphql
- chat hn style (answers votes tree style)
- normalize state
  - everything as object and not array ?
- chat with websockets
  - one chat
    - list messages
      - everyone
      - with username and date
      - with authentication
        - just add the token to the message
    - send message
    - socket.io

- security
  - ssl
  - https cookie
  - algorithm check for jwt

- user sollte doch keine votes haben


/- add Phases to Projects
  /- Phases table
  /- default State Draft
  /- move the Project to the next Phase
  /- only owner can move
  /- show phase in list
- add Tasks to Projects
  /- task table
  /- create tasks
  /- members can take tasks
  /- get members from server
  /- show if you are a member on frontend
  /- tasks have states
    /- draft | approved | assigned/todo | in progress | done
    /- state can be moved by owner
  /- style task details
/- style tabs
/- chat over tcp
  /- create a chat component
  /- one per project task and issue
  /- style a chat component
/- mobile friendlierish menu

/- disable upvote button if user already upvoted


taskowners seperate table
  id
  taskId
  userId
  date




schickt man bei jedem upvote an die db oder wartet ma auf componentWillUnmount

////////////////////////////////////////////////////////////////////////////////
            - mvp definieren
              /-user mgmt
                /- sign up
                /- login
                /- logout
                /- beim startup schaun ob der jwt abgelaufen ist
                  /- beziehugnsweise der cookie sollte genauso schnell wie der jwt ablaufen
                /- wenn sich ein user einloggt muss ich mir die votes holen
                  /- wenn ein user vom cookie kommt muss ich beim starten der app die votes holen
              /- create project
                /- title
                /- image (imgur link)
                /- description
              - view projects
                /- sorted by votes
                /- image and title
                /- after detail site the shouldFetchProjects returns false
                - upvoted project beim user zu halten is retarded
                - einfach ganz normal bei den projekten speichern wer es upgevoted hat
                  und dann schaun ob man das selber is
              /- vote for project
                /- one vote per user
                /- change vote
                /- upvoten muss im frontend auch gespeichert werden
                /- downvoten natürlich auch
                /- ich muss auf refresh die daten holen
                /- ich muss schaun das es funktioniert wenn man eingeloggt die projekte holt
                /- und wenn man einloggt und die projekte schon hat
                - backend checken ob man schon einmal upgevoted hat
              /- view details of project
                /- list of users who liked it (as an example of getting more details)
                /- get all Project data when deep Linking to the detail view
                /- redirect after creation
              /- styling
                /- list
                /- forms
                /- details
              - fehlermeldungen
                - I DONT WANTO
                - 403
                - vergebenen title (dasselbe wie beim signup)
                - wenn einfach irgendwas schiefgeht anzeigen
                /- create project und alles andere war uneingeloggt nicht machen kann
                  nicht anzeigen
////////////////////////////////////////////////////////////////////////////////

user muss die upvotes gespeichert haben
=> wenn ich mir den user hol (einloggen)
dann muss ich die votes dazujoinen
wenn ich upvote dann muss das zum user dazu kommen

!!!!!

wenn ich die liste anzeige dann macht es viel mehr sinn das upvoted (bool)
bei den projekten is
das heißt ich muss einmal alle projekte durchgehen und schaun ob es bei der liste dabei is

wenn ein eingeloggter user sich die projekte hohlt bekommt er dazu gejoint ob er sie schon upgevoted hat
wenn ein uneingeloggter holt bekommt er alle projekte ohne der info
loggt er sich dann ein bekommt er eine liste aller upgevoteten und im frontend wird gerechnet

im  backend wird immer kontrolliert das er nicht double dippt

wenn man upvoted wird beim projekt einfach upgevoted gesetzt
wenn ich die projekte als objekt und nciht als array speicher dann muss ich nicht durch loopen


wenn ich upvote im frontend dann schreib ich das zum projekt dazu
=> project reducer sollte upvote haben

UPVOTE_PROJECT (project)


REQUEST_UPVOTED (projects) beim einloggen falls projects schon da sind



- tables definieren
  - users
    - Date
    - username
    - password (encrypted)
  - projects
    - id
    - title
    - imgurLink
    - description
    - creator   //TODO should be userId
    - timestamp
  - votes
    - user
    - timestamp
    - project



- aufräumen

- tests

- login with google...
